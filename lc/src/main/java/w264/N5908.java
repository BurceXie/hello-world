package w264;

/**
 * 2049. 统计最高分的节点数目(2)
 * https://leetcode-cn.com/problems/count-nodes-with-the-highest-score/
 */
public class N5908 {

	public static void main(String[] args) {
		Solution s = new N5908().new Solution();

		System.out.println(s.countHighestScoreNodes(new int[] {-1,2,0,2,0}));
		System.out.println(s.countHighestScoreNodes(new int[] {-1,2,0}));
		System.out.println(s.countHighestScoreNodes(new int[] {-1,308,1559,546,1853,1065,362,523,1392,1691,494,636,922,1396,1525,802,1219,998,1779,796,284,1474,258,657,845,108,520,913,827,622,445,553,440,1546,372,1082,137,552,510,18,436,1623,478,273,1276,8,1774,1364,1527,367,586,1235,472,30,826,810,1728,1800,478,1653,1721,54,1879,248,384,1409,824,1384,1360,1451,63,544,1246,691,1708,1000,1338,804,167,1128,461,688,62,660,1240,1009,1189,691,1464,81,1762,762,603,1834,103,32,1871,1120,663,900,1436,1581,590,336,455,596,63,227,23,1874,466,86,153,696,211,118,1800,688,504,42,239,197,149,1459,1769,1655,570,1354,1600,1857,1827,891,193,928,949,1656,139,1793,1427,67,1527,1444,1297,1424,331,1429,485,1689,1570,615,679,385,1193,450,218,1371,1361,1280,96,1405,1838,777,808,770,778,1561,60,1383,1123,1869,198,1395,1168,1138,1779,1792,906,1287,657,1594,1255,140,308,827,1875,1118,1454,1478,1562,1603,1676,1056,1752,34,284,587,1831,605,749,322,1751,1662,359,498,1480,173,440,889,595,0,1402,253,1705,1280,51,1677,1815,1549,993,1272,1446,1277,380,575,1524,333,714,100,445,575,1208,761,393,753,1740,434,169,739,1744,157,762,1725,908,52,563,1574,1270,18,1607,530,971,1844,241,492,1201,895,1346,972,838,1729,1861,782,514,812,1223,569,1872,1237,1625,1279,955,882,1714,573,90,1526,370,464,1727,1698,572,1315,1671,1568,408,965,250,1242,570,1708,1261,577,666,1842,59,133,1493,1567,1444,1641,272,1516,1179,741,1311,378,1852,370,406,1041,85,1131,1788,1135,1186,1669,209,834,1752,645,527,1838,911,1299,718,1560,708,1517,1031,979,404,1830,1265,1215,361,765,71,1681,178,1363,1167,1018,1632,1246,1750,1652,1381,1276,1485,797,1529,1881,768,12,1260,711,715,1364,403,372,1287,1570,1798,1683,524,1637,1701,432,814,169,401,515,1083,393,1263,776,578,217,1182,550,1858,601,1802,334,1379,1427,686,1153,1108,1080,1313,681,1328,1735,867,94,599,1178,1716,103,285,585,1848,123,1235,19,1821,1315,646,1549,203,1794,1775,19,474,1604,243,1820,52,271,1211,806,1236,697,1158,174,1810,1431,1343,47,1396,818,1183,576,919,471,238,159,146,720,1275,674,1582,886,267,595,293,526,794,1470,1193,600,1640,1258,774,1080,405,1457,640,1608,829,524,491,1522,1796,1873,1696,2,250,1216,534,421,27,1796,1172,904,86,596,484,390,1003,485,707,916,1593,1081,1602,447,1384,1528,1510,1015,649,1440,1399,226,148,255,700,1490,1098,1723,707,1339,1095,721,1318,359,963,469,430,311,313,732,1733,236,610,1813,1002,594,1375,375,559,1233,74,663,1684,1419,1595,1490,1577,1486,1809,531,1830,1512,924,798,40,1026,1774,71,786,800,1308,35,1613,1687,313,0,909,1821,1223,1077,738,1526,1745,1398,1667,807,197,1791,709,221,72,511,480,1478,1876,1293,858,274,138,291,994,331,1359,1120,736,796,965,16,1443,1349,935,138,1149,960,1519,1039,1047,216,1795,1522,1807,912,312,613,1730,1293,846,1412,1097,652,645,1812,1238,246,412,1092,389,583,535,285,1258,473,1789,1033,987,853,1100,1318,58,1521,1024,580,287,1884,178,1772,898,792,1506,1265,1001,813,883,306,7,561,608,1403,181,39,1492,676,1826,1162,821,140,850,164,1324,356,1,1732,406,1286,286,590,1182,1801,1506,1470,1055,586,1250,343,933,1852,322,1213,948,281,1824,262,910,1177,529,1544,748,1487,1578,903,510,1152,1581,1301,1117,1308,627,401,3,80,919,175,46,1841,1372,1286,567,292,111,1612,885,1615,1356,1090,925,1178,326,1394,711,968,1150,1107,799,635,1829,400,915,858,1757,1007,228,275,1730,443,670,1229,1663,1834,1872,706,1678,1571,1609,497,1847,608,1618,1573,794,1082,916,405,804,136,606,106,28,1660,1878,262,1392,1175,493,727,957,1465,757,1757,1826,1699,802,1731,568,1476,1440,207,1643,60,991,325,554,1850,1554,706,1324,301,1556,425,1327,653,136,995,1059,859,847,1345,981,183,1592,98,1879,709,361,1369,704,867,1084,1376,681,830,1446,1288,932,474,536,1862,542,514,1051,742,1523,307,1435,62,959,160,561,1799,1328,1423,746,1053,1606,1762,1577,1395,1829,931,1353,757,1438,394,1046,1077,1274,1504,1862,55,1104,682,1854,407,1369,1429,902,1610,1563,1255,1547,157,580,148,828,1514,1624,1758,75,360,1145,1737,1335,173,66,647,730,861,760,187,1361,1111,1187,121,287,893,1544,945,932,247,164,1498,23,49,1356,781,211,1513,1621,1001,426,1348,1723,1713,1131,1588,1666,925,1554,390,219,978,682,735,591,1342,819,1418,1551,463,1511,1487,718,385,1295,1682,1749,852,1337,89,1733,1160,1238,874,1096,175,1053,1245,915,592,1130,687,878,1189,750,1861,1277,912,894,1409,1126,1557,1048,1750,837,1353,1718,1722,1073,346,1758,1439,1803,388,502,1062,1028,811,1709,922,651,78,1017,97,1028,637,17,721,1242,1797,1883,1559,1618,1550,1393,731,450,1122,895,1159,1561,404,894,1622,982,1702,324,914,463,407,938,1016,77,1320,165,1154,1538,1489,1186,421,866,844,1007,110,34,1598,665,1149,192,30,386,1768,1098,1694,413,1289,424,1593,321,549,1406,658,1056,330,1433,1501,629,1202,1282,1616,1597,1883,1580,1155,1122,368,141,350,91,1158,1434,1079,228,1196,1410,205,967,861,991,333,320,442,1585,3,456,7,1851,1652,1404,799,1550,1815,835,367,864,571,271,1626,1543,1496,1674,1734,387,1136,376,302,1164,1110,350,1370,508,1278,1173,6,1442,1649,1434,48,424,957,655,1164,1507,758,1547,993,1128,788,637,1794,905,1355,1191,1648,1647,1039,958,1097,646,788,1588,1406,1768,1362,1005,846,1494,616,1875,121,951,697,992,582,1323,1180,716,57,1214,1855,98,427,36,1091,366,680,1124,1846,500,1591,375,81,1669,566,1513,740,887,255,1806,1870,1493,667,1151,947,857,1181,742,1084,1333,684,464,1057,980,243,1695,689,472,432,791,666,634,1609,541,1592,131,1679,1869,572,641,1732,1180,735,1003,373,1847,1642,1220,1607,41,1445,679,1812,252,780,1586,1089,654,1658,1667,1679,1509,1496,1859,1321,627,1479,528,417,1423,57,1137,237,1587,885,1367,756,685,1876,479,9,158,289,1424,183,1032,1791,1540,948,631,520,741,1144,1428,1300,182,1038,1046,1399,939,579,603,884,1824,501,443,1299,1153,1266,1546,379,1309,296,466,177,635,1697,786,1766,1489,1026,4,951,1624,77,131,1705,461,532,544,1697,448,479,1628,962,1630,369,1151,979,1275,133,93,256,1473,628,1831,1362,1038,1735,144,942,1620,343,696,298,446,1069,560,967,79,147,391,473,782,1766,1736,278,947,694,1272,678,1820,658,1760,1350,1334,1787,1354,1066,139,277,784,69,1156,1471,107,1530,1854,54,1700,1703,165,1797,1836,1183,1110,13,719,797,324,1365,269,1734,209,1764,497,1281,687,1334,1083,95,1552,470,1687,1417,1069,436,263,884,1471,247,1701,79,700,1619,1509,152,817,665,778,549,279,1019,695,1154,346,851,369,1802,1844,1469,1629,27,182,511,1612,1498,1649,840,1759,893,971,513,746,1146,442,840,1629,74,532,1253,579,108,1477,939,1344,784,1030,534,818,754,1107,630,581,1270,1425,1375,166,1336,1385,1220,621,820,1720,288,642,1817,655,78,807,651,946,1537,625,84,547,954,767,339,482,857,1425,49,1859,1788,1595,186,1783,1006,191,28,1130,231,1622,1699,743,281,620,1323,1417,1248,1363,1716,1807,886,353,1843,1871,1403,811,836,988,863,1818,701,126,330,1798,513,1327,20,1360,396,975,1297,415,400,1127,704,889,854,1721,1530,1245,850,1442,356,1451,551,1474,943,1175,911,1378,769,1349,616,1761,1626,398,1407,67,177,1313,468,1087,809,822,699,896,1436,653,1512,864,1368,492,248,998,745,1343,793,482,1771,1184,360,1497,733,1836,981,891,946,294,1617,437,1628,1410,1161,1021,1529,55,832,1210,1310,1785,1881,1594,962,1884,1462,32,1019,994,856,374,1187,880,97,727,527,853,1179,1596,221,985,505,870,207,1724,648,25,745,989,1192,1548,905,1073,187,1499,1662,638,1325,470,415,1263,847,292,1540,496,809,1454,693,9,254,1138,1400,1469,1117,501,1814,1040,296,265,542,279,127,1694,1473,225,471,621,744,984,159,323,427,316,564,1173,1329,1301,1102,671,306,583,959,1166,732,1426,1499,1256,1320,984,1763,1870,1211,37,841,1054,1783,1314,1468,174,887,1093,402,1174,341,812,830,910,983,1099,1642,82,985,883,758,1296,684,1407,316,439,1819,1268,146,1015,212,1219,593,8,950,246,1244,167,660,1486,1387,628,1578,1226,1124,1309,927,716,1719,1239,1370,593,1264,1635,852,1051,192,1321,1383,1606,789,1538,1266,644,866,1305,288,1371,838,1713,1009,428,72,238,924,321,547,1775,992,188,1472,1563,669,12,1365,1348,1159,1021,1214,1201,1350,1455,345,836,486,839,1099,629,368,334,1743,1177,1340,620,1278,689,1648,158,1742,1290,613,914,338,286,938,1492,171,1090,1651,1782,434,489,115,431,222,152,1374,989,58,743,1715,625,1696,1659,1441,184,1204,1358,179,781,1033,1556,430,374,1582,48,456,483,469,541,312,1806,265,806,1303,1514,1377,251,1772,1152,341,961,780,1587,1653,730,614,1698,1387,1866,824,309,180,810,1597,530,1331,647,1645,437,1729,876,844,768,569,297,926,1810,1342,828,1065,1059,1222,142,1161,1557,717,1206,1333,588,1571,871,505,1415,1809,1091,126,1181,1008,703,1372,941,649,1205,825,1322,35,1022,529,1240,206,1119,408,298,352,1156,1641,750,1744,913,1143,1753,225,584,389,1391,196,147}));
	}

class Solution {
    public int countHighestScoreNodes(int[] parents) {
    	int highestScore = 0, higestScoreCount = 0;
    	
    	int totalCount = parents.length;
    	int[] countByNode = new int[parents.length];
    	Integer[] firstChilds = new Integer[parents.length], secondChilds = new Integer[parents.length];
    	for (int i = 0; i < parents.length; i++) {
    		if (parents[i] >= 0 && firstChilds[parents[i]] == null) {
    			firstChilds[parents[i]] = i;
    		} else if (parents[i] >= 0 && secondChilds[parents[i]] == null) {
    			secondChilds[parents[i]] = i;
    		}
    	}
    	
    	for (int i = parents.length - 1; i >= 0; i--) {
    		if (parents[i] == -1) {
    			countByNode[i] = totalCount;
    		} else {
    			int count = 1;
    			if (firstChilds[i] != null) {
    				count += countByNode(parents, firstChilds[i]);
    			}
    			if (secondChilds[i] != null) {
    				count += countByNode(parents, secondChilds[i]);
    			}
    			countByNode[i] = count;
    		}
    	}
    	
    	for (int i = 0; i < parents.length; i++) {
    		int countByParent = totalCount;
    		if (parents[i] == -1) {
    			countByParent++;
    		}
    		int countByMyself = countByNode[i];
    		int score = (countByParent - countByMyself);
    		if (firstChilds[i] != null) {
    			score = score * countByNode[firstChilds[i]];
    		}
    		if (secondChilds[i] != null) {
    			score = score * countByNode[secondChilds[i]];
    		}
    		if (score == highestScore) {
    			higestScoreCount++;
    		} else if (score > highestScore) {
    			highestScore = score;
    			higestScoreCount = 1;
    		}
    	}
    	
    	return higestScoreCount;
    }
    
    public int countByNode(int[] parents, int node) {
    	int count = 1;
    	for (int i = 0; i < parents.length; i++) {
    		if (parents[i] == node) {
    			count += countByNode(parents, i);
    		}
    	}
    	return count;
    }
}
}

